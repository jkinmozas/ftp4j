/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ftp4j;

import it.sauronsoftware.ftp4j.FTPAbortedException;
import it.sauronsoftware.ftp4j.FTPClient;
import it.sauronsoftware.ftp4j.FTPDataTransferException;
import it.sauronsoftware.ftp4j.FTPException;
import it.sauronsoftware.ftp4j.FTPIllegalReplyException;
import it.sauronsoftware.ftp4j.FTPListParseException;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;

/**
 *
 * @author Joaquin
 */
public class JFFTP extends javax.swing.JFrame {

    DefaultListModel listaServ = new DefaultListModel();
    DefaultListModel listaCliente = new DefaultListModel();
    FTPClient ftpclient;
    String rutaActual = "C:\\Users\\Joaquin\\Documents\\NetBeansProjects\\FTP4J";
    String usuario ="u967358683";
    String pass = "joselu1998";
    String host ="31.170.165.231";
    int port = 21;
    String[] user = new File(rutaActual).list();

    /**
     * Creates new form JFFTP
     */
    public JFFTP() {
        initComponents();
    }

    public void conect() {
        try {
            ftpclient = new FTPClient();
            ftpclient.connect(host, port);
            ftpclient.login(usuario, pass);
            System.out.println(ftpclient.listNames()[3]);
        } catch (IllegalStateException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPIllegalReplyException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPDataTransferException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPAbortedException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPListParseException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void initList() {
        jListCliente.setModel(listaCliente);
        jListServidor.setModel(listaServ);

    }

    public void updateUserList() {
        if (user != null) {
            listaCliente.removeAllElements();
            listaCliente.clear();

            System.out.println(user.length);
            for (int i = 0; i < user.length; i++) {
                System.out.println(user[i]);
                listaCliente.addElement(user[i]);
            }

        }
    }

    public void updateServerList() {
        try {
            for (int i = 0; i < ftpclient.listNames().length; i++) {

                System.out.println(ftpclient.listNames()[i]);
                listaServ.addElement(ftpclient.listNames()[i]);
                

            }
        } catch (IllegalStateException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPIllegalReplyException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPDataTransferException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPAbortedException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPListParseException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButtonUploadFile = new javax.swing.JButton();
        jButtonDelFile = new javax.swing.JButton();
        jButtonDownloadFile = new javax.swing.JButton();
        jButtonCreateDirec = new javax.swing.JButton();
        jButtonDelDirectory = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListServidor = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListCliente = new javax.swing.JList<>();
        jTextFieldNombreDirectiorio = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButtonDirecUp = new javax.swing.JButton();
        jButtonOpenDirectory = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonUploadFile.setText("Subir Fichero");
        jButtonUploadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUploadFileActionPerformed(evt);
            }
        });

        jButtonDelFile.setText("Eliminar Fichero");
        jButtonDelFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelFileActionPerformed(evt);
            }
        });

        jButtonDownloadFile.setText("Descargar Fichero");
        jButtonDownloadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDownloadFileActionPerformed(evt);
            }
        });

        jButtonCreateDirec.setText("Crear Directorio");
        jButtonCreateDirec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateDirecActionPerformed(evt);
            }
        });

        jButtonDelDirectory.setText("Borrar Directorio");
        jButtonDelDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelDirectoryActionPerformed(evt);
            }
        });

        jButtonExit.setText("Salir");

        jLabel1.setText("Servidor: ");

        jLabel2.setText("Directorio:");

        jLabel3.setText("Usuario");

        jListServidor.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jListServidor);

        jListCliente.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jListCliente);

        jLabel4.setText("Nombre del directorio a crear");

        jButtonDirecUp.setText("Subir de Directorio");
        jButtonDirecUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDirecUpActionPerformed(evt);
            }
        });

        jButtonOpenDirectory.setText("Abrir Directorio");
        jButtonOpenDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenDirectoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(86, 86, 86))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButtonDownloadFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonCreateDirec, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonDelDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonDelFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonUploadFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldNombreDirectiorio)
                            .addComponent(jButtonDirecUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonOpenDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldNombreDirectiorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCreateDirec)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDownloadFile)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDelDirectory)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDelFile)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonOpenDirectory)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDirecUp)
                        .addGap(0, 11, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonUploadFile)
                        .addGap(39, 39, 39)
                        .addComponent(jButtonExit)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCreateDirecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateDirecActionPerformed
        try {
            // TODO add your handling code here:

            ftpclient.createDirectory(jTextFieldNombreDirectiorio.getText());
            listaServ.removeAllElements();
            updateServerList();
        } catch (IllegalStateException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPIllegalReplyException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonCreateDirecActionPerformed

    private void jButtonDirecUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDirecUpActionPerformed
        try {
            // TODO add your handling code here:

            ftpclient.changeDirectoryUp();
            listaServ.removeAllElements();
            updateServerList();
        } catch (IllegalStateException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPIllegalReplyException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FTPException ex) {
            Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonDirecUpActionPerformed

    private void jButtonDelFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelFileActionPerformed
        // TODO add your handling code here:
if(jListServidor.getSelectedIndex()!=-1){
    try {
        ftpclient.deleteFile(jListServidor.getSelectedValue());
        listaServ.removeAllElements();
        updateServerList();
    } catch (IllegalStateException ex) {
        Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
    } catch (FTPIllegalReplyException ex) {
        Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
    } catch (FTPException ex) {
        Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
    }
}

    }//GEN-LAST:event_jButtonDelFileActionPerformed

    private void jButtonDelDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelDirectoryActionPerformed
        // TODO add your handling code here:
        if (jListServidor.getSelectedIndex() != -1) {

            try {
                ftpclient.deleteDirectory(jListServidor.getSelectedValue());
                listaServ.removeAllElements();
                updateServerList();
            } catch (IllegalStateException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FTPIllegalReplyException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FTPException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jButtonDelDirectoryActionPerformed

    private void jButtonDownloadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDownloadFileActionPerformed
        // TODO add your handling code here:

        if (jListServidor.getSelectedIndex() != -1) {
            try {

                String file = jListServidor.getSelectedValue();
                String localFile = rutaActual + file;
                System.out.println(file);
                ftpclient.download(file, new File(localFile));
                listaCliente.removeAllElements();
                updateUserList();

            } catch (IllegalStateException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FTPIllegalReplyException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FTPException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FTPDataTransferException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FTPAbortedException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonDownloadFileActionPerformed

    private void jButtonUploadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUploadFileActionPerformed
        // TODO add your handling code here:

        if (jListCliente.getSelectedIndex() != -1) {
            try {
                ftpclient.append(new File(jListCliente.getSelectedValue()));
                listaServ.removeAllElements();
                updateServerList();
            } catch (IllegalStateException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FTPIllegalReplyException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FTPException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FTPDataTransferException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FTPAbortedException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonUploadFileActionPerformed

    private void jButtonOpenDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenDirectoryActionPerformed
        // TODO add your handling code here:
        if(jListServidor.getSelectedIndex()!=-1){
            try {
                String destino = jListServidor.getSelectedValue();
                ftpclient.changeDirectory(destino);
                listaServ.removeAllElements();
                updateServerList();
            } catch (IllegalStateException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FTPIllegalReplyException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FTPException ex) {
                Logger.getLogger(JFFTP.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonOpenDirectoryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFFTP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFFTP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFFTP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFFTP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                JFFTP cliente = new JFFTP();
                cliente.conect();
                cliente.initList();
                cliente.updateServerList();
                cliente.updateUserList();
                cliente.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonCreateDirec;
    private javax.swing.JButton jButtonDelDirectory;
    private javax.swing.JButton jButtonDelFile;
    private javax.swing.JButton jButtonDirecUp;
    private javax.swing.JButton jButtonDownloadFile;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonOpenDirectory;
    private javax.swing.JButton jButtonUploadFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jListCliente;
    private javax.swing.JList<String> jListServidor;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextFieldNombreDirectiorio;
    // End of variables declaration//GEN-END:variables
}
